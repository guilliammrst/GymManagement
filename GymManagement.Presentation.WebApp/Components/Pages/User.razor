@page "/user/{userId:int}"
@using GymManagement.Presentation.WebApp.ApiClients
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

<PageTitle>User</PageTitle>

<NavLink class="btn btn-primary nav-link" href="users" style="margin-bottom: 20px; width: 100px; display: inline-block;">
    <span class="bi bi-list-nested" aria-hidden="true"></span> Retour
</NavLink>

<h3>User Details</h3>

@if (user == null)
{
	<p>Loading...</p>
}
else
{
	<div>
		<UserComponent User="user"></UserComponent>
		<MembershipComponent Memberships="user.Memberships" UserId="user.Id" OnPaymentRequested="LoadUser"></MembershipComponent>
		<AttendanceComponent Attendances="user.Attendances"></AttendanceComponent>
		<RadzenButton Text="Update" Click="OpenUpdateUserDialog" Style="margin-bottom: 20px;" />
		<RadzenButton Text="Subscribe" Click="OpenSubscribeUserDialog" Style="margin-bottom: 20px;" />
		<RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Delete" Click="OpenDeleteUserDialog" Style="margin-bottom: 20px;" />
	</div>
}

@code {
	[Parameter]
	public int userId { get; set; }

	private UserDetailsDto? user;

	protected override async Task OnInitializedAsync()
	{
		await LoadUser();
	}

	private async Task LoadUser()
	{
		user = await _gymApiClient.GetUserByIdAsync(userId);
	}

	private async Task OpenUpdateUserDialog()
	{
		if (user == null)
			return;

		var result = await _dialogService.OpenAsync<UpdateUserPopup>("Modifier l'utilisateur", new Dictionary<string, object>()
			{
				["User"] = user
			},
			options: new DialogOptions
				{
					Width = "600px",
					Height = "500px",
					Style = "top: 20vh; left: 12vw;"
				});

		if (result is true)
			await LoadUser();
	}

	private async Task OpenSubscribeUserDialog()
	{
		if (user == null)
			return;

		var result = await _dialogService.OpenAsync<SubscribeUserPopup>("Abonner l'utilisateur", new Dictionary<string, object>()
			{
				["UserId"] = userId
			},
			options: new DialogOptions
				{
					Width = "600px",
					Height = "500px",
					Style = "top: 20vh; left: 12vw;"
				});

		if (result is true)
			await LoadUser();
	}

	private async Task OpenDeleteUserDialog()
	{
		if (user == null)
			return;

		var result = await _dialogService.OpenAsync<DeletePopup>("Supprimer l'utilisateur", new Dictionary<string, object>()
			{
				["ItemId"] = userId,
				["DeleteAction"] = new Func<int, Task<bool>>(async id =>
				{
					return await _gymApiClient.DeleteUserAsync(id);
				}),
				["RedirectUrl"] = "users"
			},
			options: new DialogOptions
				{
					Width = "600px",
					Height = "250px",
					Style = "top: 20vh; left: 12vw;"
				});
	}
}
