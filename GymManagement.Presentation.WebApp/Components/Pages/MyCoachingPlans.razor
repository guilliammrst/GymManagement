@page "/my-coaching-plans"
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

<PageTitle>Mes plans de coaching - GymManagement</PageTitle>

<div class="page-header">
    <div class="page-header-content">
        <div class="page-title-section">
            <h1 class="page-title">🎯 Mes plans de coaching</h1>
            <p class="page-description">Gérez vos programmes d'entraînement personnalisés</p>
        </div>
        <br />
        <div class="page-actions">
            <RadzenButton Text="Nouveau plan" 
                         Icon="add" 
                         ButtonStyle="ButtonStyle.Primary"
                         Click="OpenCreateCoachingPlanDialog" 
                         class="btn-create" />
        </div>
    </div>
</div>

<div class="results-section">
    @if (coachingPlans == null)
    {
        <div class="loading-state">
            <div class="loading-spinner">
                <div class="spinner"></div>
                <p>Chargement de vos plans...</p>
            </div>
        </div>
    }
    else if (coachingPlans.Count == 0)
    {
        <div class="empty-state">
            <div class="empty-state-content">
                <span class="empty-state-icon">🎯</span>
                <h3>Aucun plan de coaching trouvé</h3>
                <p>Créez votre premier programme d'entraînement personnalisé.</p>
                <RadzenButton Text="Créer un plan" 
                             Icon="add" 
                             ButtonStyle="ButtonStyle.Primary"
                             Click="OpenCreateCoachingPlanDialog" />
            </div>
        </div>
    }
    else
    {
        <div class="results-header">
            <div class="results-info">
                <span class="results-count">@coachingPlans.Count plans créés</span>
            </div>
        </div>
        
        <div class="coaching-plans-grid">
            @foreach (var plan in coachingPlans)
            {
                <div class="coaching-plan-card">
                    <div class="coaching-plan-card-header">
                        <div class="coaching-plan-icon">
                            <span class="coaching-plan-icon-text">🎯</span>
                        </div>
                        <div class="coaching-plan-basic-info">
                            <h4 class="coaching-plan-name">@plan.Description</h4>
                            <p class="coaching-plan-id">ID: #@plan.Id</p>
                        </div>
                    </div>
                    
                    <div class="coaching-plan-card-footer">
                        <NavLink href="@($"coaching-plan/{plan.Id}")" class="btn btn-primary btn-sm">
                            <span>📋</span> Détails
                        </NavLink>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<CoachingPlanDto>? coachingPlans;

    protected override async Task OnInitializedAsync()
    {
        await LoadCoachingPlans();
    }

    private async Task LoadCoachingPlans()
    {
        coachingPlans = await _gymApiClient.GetCoachingPlansAsync(true);
    }

    private async Task OpenCreateCoachingPlanDialog()
    {
        var result = await _dialogService.OpenAsync<CreateCoachingPlanPopup>("Créer un plan de coaching",
            options: new DialogOptions
            {
                Width = "600px",
                Height = "500px",
                Style = "top: 10vh; left: 50%; transform: translateX(-50%);"
            });

        if (result is true)
            await LoadCoachingPlans();
    }
}
