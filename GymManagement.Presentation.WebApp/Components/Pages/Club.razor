@page "/club/{ClubId:int}"
@using GymManagement.Presentation.WebApp.ApiClients
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

<PageTitle>Détails du club - GymManagement</PageTitle>

<div class="page-header">
    <div class="page-header-content">
        <div class="page-title-section">
            <BackButton ReturnUrl="clubs" Text="Retour aux clubs" Subtitle="Gestion des clubs" />
            <h1 class="page-title">🏢 Détails du club</h1>
            @if (club != null)
            {
                <p class="page-description">@club.Name • ID: #@club.Id</p>
            }
        </div>
        @if (club != null)
        {
            <div class="page-actions">
                <RadzenButton Text="Modifier" 
                             Icon="edit" 
                             ButtonStyle="ButtonStyle.Primary"
                             Click="OpenUpdateClubDialog" 
                             class="btn-action" />
            </div>
        }
    </div>
</div>

<div class="club-details-section">
    @if (club == null)
    {
        <div class="loading-state">
            <div class="loading-spinner">
                <div class="spinner"></div>
                <p>Chargement des détails...</p>
            </div>
        </div>
    }
    else
    {
        <div class="club-details-content">
            <div class="club-info-card">
                <ClubComponent Club="club"></ClubComponent>
            </div>
            
            <div class="club-manager-card">
                <h3 class="card-title">👤 Manager du club</h3>
                <UserComponent User="club.Manager"></UserComponent>
            </div>
            
            <div class="club-memberships-card">
                <MembershipComponent Memberships="club.Memberships"></MembershipComponent>
            </div>
            
            <div class="club-attendance-card">
                <AttendanceComponent Attendances="club.Attendances"></AttendanceComponent>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int ClubId { get; set; }

    private ClubDetailsDto? club;

    protected override async Task OnInitializedAsync()
    {
        await LoadClub();
    }

    private async Task LoadClub()
    {
        club = await _gymApiClient.GetClubByIdAsync(ClubId);
    }

    private async Task OpenUpdateClubDialog()
    {
        if (club == null)
            return;

        var result = await _dialogService.OpenAsync<UpdateClubPopup>("Modifier le club", new Dictionary<string, object>()
        {
            ["Club"] = club
        },
        options: new DialogOptions
        {
            Width = "600px",
            Height = "500px",
            Style = "top: 10vh; left: 50%; transform: translateX(-50%);"
        });

        if (result is true)
            await LoadClub();
    }
}