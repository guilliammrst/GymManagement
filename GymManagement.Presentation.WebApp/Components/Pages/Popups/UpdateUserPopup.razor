@using GymManagement.Presentation.WebApp.ApiClients
<EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label>Nom :</label>
        <InputText class="form-control" @bind-Value="user.Name" />
    </div>

    <div class="mb-2">
        <label>Prénom :</label>
        <InputText class="form-control" @bind-Value="user.Surname" />
    </div>

    <div class="mb-2">
        <label>Email :</label>
        <InputText class="form-control" @bind-Value="user.Email" />
    </div>

    <div class="mb-2">
        <label>Téléphone :</label>
        <InputText class="form-control" @bind-Value="user.PhoneNumber" />
    </div>

    <div class="mb-2">
        <label>Date de naissance :</label>
        <InputDate class="form-control" @bind-Value="user.Birthdate" />
    </div>

    <div class="mb-2">
        <label>Mot de passe :</label>
        <InputText type="password" class="form-control" @bind-Value="user.Password" />
    </div>

    <div class="mb-2">
        <label>Rôle :</label>
        <InputSelect class="form-control" @bind-Value="user.Role">
            <option value="">Sélectionner un rôle</option>
            @foreach (var role in Enum.GetValues<Role>())
            {
                <option value="@role">@role.ToString()</option>
            }
        </InputSelect>
    </div>

    <div class="mb-2">
        <label>Genre :</label>
        <InputSelect class="form-control" @bind-Value="user.Gender">
            <option value="">Sélectionner un genre</option>
            @foreach (var gender in Enum.GetValues<Gender>())
            {
                <option value="@gender">@gender.ToString()</option>
            }
        </InputSelect>
    </div>

    <div class="mb-2">
        <label>Pays :</label>
        <InputSelect class="form-control" @bind-Value="user.Country">
            <option value="">Sélectionner un pays</option>
            @foreach (var country in Enum.GetValues<Country>())
            {
                <option value="@country">@country.ToString()</option>
            }
        </InputSelect>
    </div>

    <div class="mb-2">
        <label>Ville :</label>
        <InputText class="form-control" @bind-Value="user.City" />
    </div>

    <div class="mb-2">
        <label>Rue :</label>
        <InputText class="form-control" @bind-Value="user.Street" />
    </div>

    <div class="mb-2">
        <label>Code postal :</label>
        <InputText class="form-control" @bind-Value="user.PostalCode" />
    </div>

    <div class="mb-2">
        <label>Numéro :</label>
        <InputText class="form-control" @bind-Value="user.Number" />
    </div>
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <RadzenButton Text="Enregistrer" Type="Submit" Style="margin-right: 10px" />
    <RadzenButton Text="Annuler" ButtonStyle="ButtonStyle.Secondary" Click="Close" />
</EditForm>

@code {
    [Parameter]
    public UserDto User { get; set; }

    private UpdateUserDto user = new();
    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        if (User != null)
        {
            user.Name = User.Name;
            user.Surname = User.Surname;
            user.Email = User.Email;
            user.PhoneNumber = User.PhoneNumber;
            user.Birthdate = User.Birthdate;
            user.Role = User.Role;
            user.Gender = User.Gender;
            if (User.Address != null)
			{
                user.Country = User.Address.Country;
                user.City = User.Address.City;
                user.Street = User.Address.Street;
                user.Number = User.Address.Number;
                user.PostalCode = User.Address.PostalCode;
			}
        }
    }

    private async Task HandleValidSubmit()
    {
        var result = await _gymApiClient.UpdateUserAsync(User.Id, user);
        if (!result.Success)
        {
            errorMessage = result.ErrorMessage;
            return;
        }
        _dialogService.Close(true);
    }

    private void Close() => _dialogService.Close(false);
}
